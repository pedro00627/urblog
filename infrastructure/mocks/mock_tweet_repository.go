// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pedro00627/urblog/infrastructure/repositories (interfaces: TweetRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/pedro00627/urblog/domain"
)

// MockTweetRepository is a mock of TweetRepository interface.
type MockTweetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTweetRepositoryMockRecorder
}

// MockTweetRepositoryMockRecorder is the mock recorder for MockTweetRepository.
type MockTweetRepositoryMockRecorder struct {
	mock *MockTweetRepository
}

// NewMockTweetRepository creates a new mock instance.
func NewMockTweetRepository(ctrl *gomock.Controller) *MockTweetRepository {
	mock := &MockTweetRepository{ctrl: ctrl}
	mock.recorder = &MockTweetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTweetRepository) EXPECT() *MockTweetRepositoryMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockTweetRepository) FindByUserID(arg0 string, arg1, arg2 int) ([]*domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockTweetRepositoryMockRecorder) FindByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockTweetRepository)(nil).FindByUserID), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockTweetRepository) Save(arg0 *domain.Tweet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTweetRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTweetRepository)(nil).Save), arg0)
}
