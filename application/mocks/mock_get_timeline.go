// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pedro00627/urblog/application (interfaces: GetTimeline)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/pedro00627/urblog/domain"
)

// MockGetTimeline is a mock of GetTimeline interface.
type MockGetTimeline struct {
	ctrl     *gomock.Controller
	recorder *MockGetTimelineMockRecorder
}

// MockGetTimelineMockRecorder is the mock recorder for MockGetTimeline.
type MockGetTimelineMockRecorder struct {
	mock *MockGetTimeline
}

// NewMockGetTimeline creates a new mock instance.
func NewMockGetTimeline(ctrl *gomock.Controller) *MockGetTimeline {
	mock := &MockGetTimeline{ctrl: ctrl}
	mock.recorder = &MockGetTimelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTimeline) EXPECT() *MockGetTimelineMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetTimeline) Execute(arg0 string, arg1, arg2 int) ([]*domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetTimelineMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTimeline)(nil).Execute), arg0, arg1, arg2)
}
