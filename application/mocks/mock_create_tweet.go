// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pedro00627/urblog/application (interfaces: CreateTweet)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/pedro00627/urblog/domain"
)

// MockCreateTweet is a mock of CreateTweet interface.
type MockCreateTweet struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTweetMockRecorder
}

// MockCreateTweetMockRecorder is the mock recorder for MockCreateTweet.
type MockCreateTweetMockRecorder struct {
	mock *MockCreateTweet
}

// NewMockCreateTweet creates a new mock instance.
func NewMockCreateTweet(ctrl *gomock.Controller) *MockCreateTweet {
	mock := &MockCreateTweet{ctrl: ctrl}
	mock.recorder = &MockCreateTweetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTweet) EXPECT() *MockCreateTweetMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCreateTweet) Execute(arg0, arg1 string) (*domain.Tweet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(*domain.Tweet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockCreateTweetMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateTweet)(nil).Execute), arg0, arg1)
}
