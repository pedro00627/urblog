// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pedro00627/urblog/application (interfaces: FollowUser)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFollowUser is a mock of FollowUser interface.
type MockFollowUser struct {
	ctrl     *gomock.Controller
	recorder *MockFollowUserMockRecorder
}

// MockFollowUserMockRecorder is the mock recorder for MockFollowUser.
type MockFollowUserMockRecorder struct {
	mock *MockFollowUser
}

// NewMockFollowUser creates a new mock instance.
func NewMockFollowUser(ctrl *gomock.Controller) *MockFollowUser {
	mock := &MockFollowUser{ctrl: ctrl}
	mock.recorder = &MockFollowUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFollowUser) EXPECT() *MockFollowUserMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFollowUser) Execute(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockFollowUserMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFollowUser)(nil).Execute), arg0, arg1)
}
